#========================================================================
#    EPISODE - LOOKING AT HISTORY AND DIFFERENCES
#    SECTION - LOOKING AT HISTORY
#========================================================================

# LOOKING AT OUR HISTORY

# To see the history of changes that we made to our repository 
# (the most recent changes will be displayed at the top), 
# we can use the command `git log` 
 
git log

# Git automatically assigns an identifier (e.g. 4dd7f5) 
# to each commit made to the repository — we refer to this as 
# COMMITID in the code blocks below. 
# 
# In order to see the changes made between any earlier commit 
# and our current version, we can use `git diff` 
# followed by the commit identifier of the earlier commit:
#

git diff COMMITID		# View differences between current version and COMMITID

# 
# And, to see changes between two commits:
#

git diff OLDER_COMMITID NEWER_COMMITID


# Using our commit identifiers we can set our working directory to contain the state of the repository 
# as it was at any commit. 
#
# So, let’s go back to the very first commit we made,

git log 
git checkout %INITIAL_COMMITID

# - END - 
# This strange concept of the ‘detached HEAD’ is covered in the next section … just bear with me for now

# If we look at paper.md we’ll see from the file contents that it’s our very first version. 
cat paper.md

# And if we look at our directory, then we see that our references.txt file is gone:
ls
paper.md

# But, rest easy, while it’s gone from our working directory, it’s still in our repository. 
# We can jump back to the latest commit by doing:
# 
# $ git checkout master

git checkout master

# And references.txt will be there once more,
 ls

# So we can get any version of our files from any point in time. 
# In other words, we can set up our working directory back to any stage it was when we made a commit.
